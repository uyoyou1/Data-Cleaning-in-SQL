-- Cleaning Data With SQL Queries

-- Standerdized Sale Date

Alter Table NashvilHousing
Add SalesDateConverted Date;

UPDATE NashvilHousing
SET SalesDateConverted = Convert(date, SaleDate)

SELECT SalesDateConverted, convert(date, SaleDate)
FROM [PortfolioProject].[dbo].[NashvilHousing]



-- search for addresses with NULLvalue

SELECT *
FROM [PortfolioProject].[dbo].[NashvilHousing]
WHERE PropertyAddress is NULL
ORDER BY ParcelID

SELECT A.ParcelID, A.PropertyAddress, B.ParcelID, B.PropertyAddress, ISNULL(A.PropertyAddress, B.PropertyAddress) 
FROM [PortfolioProject].[dbo].[NashvilHousing] AS A
JOIN [PortfolioProject].[dbo].[NashvilHousing]  AS B
 ON A.ParcelID = B.ParcelID
AND A.[UniqueID ] <> B.[UniqueID ]
 WHERE A.PropertyAddress is NULL

-- Update statement needed to put the B.property address into the a.property address with null.

UPDATE A
SET PropertyAddress = ISNULL(A.PropertyAddress, B.PropertyAddress)
FROM [PortfolioProject].[dbo].[NashvilHousing] AS A
JOIN [PortfolioProject].[dbo].[NashvilHousing]  AS B
 ON A.ParcelID = B.ParcelID
 AND A.[UniqueID ] <> B.[UniqueID ]
 WHERE A.PropertyAddress is NULL

 -- Breaking Out Address into Individual COlumn (Address, City, State)

SELECT PropertyAddress
FROM [PortfolioProject].[dbo].[NashvilHousing]
-- WHERE PropertyAddress is NULL
-- ORDER BY ParcelID

SELECT 
SUBSTRING(PropertyAddress, 1,CHARINDEX(',',PropertyAddress)-1) As Adderss, 
-- the -1 signifies that you take one character less than the character shown ie ','.
-- the Charindex just locates the number where the character ',' is.
SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress)) as State -- LEN is the length of the address.
FROM [PortfolioProject].[dbo].[NashvilHousing]
 WHERE PropertyAddress is NULL
ORDER BY ParcelID

-- creating the first new column
Alter Table NashvilHousing
Add PropertySplitAddress nvarchar(255);

UPDATE NashvilHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1,CHARINDEX(',',PropertyAddress)-1)

--- Creating the Second New Column
Alter Table NashvilHousing
Add PropertySplitCity nvarchar(255);

UPDATE NashvilHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress,CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress))

SELECT*
FROM [PortfolioProject].[dbo].[NashvilHousing]

-- Owner Adderss splitting using parsename instead of substrings

SELECT OwnerAddress
FROM [PortfolioProject].[dbo].[NashvilHousing]

SELECT 
PARSENAME(REPLACE(OwnerAddress,',', '.') , 3),
PARSENAME(REPLACE(OwnerAddress,',', '.') , 2),
PARSENAME(REPLACE(OwnerAddress,',', '.') , 1)

FROM [PortfolioProject].[dbo].[NashvilHousing]


-- creating the first new column
Alter Table NashvilHousing
Add OwnerSplitAddress nvarchar(255);

UPDATE NashvilHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress,',', '.') , 3)

-- Creating the Second New Column
Alter Table NashvilHousing
Add OwnerSplitCity nvarchar(255);

UPDATE NashvilHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress,',', '.') , 2)

-- Creating the Third New Column
Alter Table NashvilHousing
Add OwnerSplitState nvarchar(255);

UPDATE NashvilHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress,',', '.') , 1)


-- Change Y and N to Yes and No in "Sold as Vacant" field

SELECT DISTINCT SoldAsVacant, COUNT(SoldAsVacant)
FROM NashvilHousing
Group By SoldAsVacant
Order BY 2

SELECT SoldAsVacant,
CASE WHEN SoldAsVacant ='Y'THEN 'Yes'
	 WHEN SoldAsVacant ='N'THEN 'NO'
	 ELSE SoldAsVacant
	 END
FROM NashvilHousing
 WHERE SoldAsVacant = 'Y' AND SoldAsVacant = 'N'

-- Update the new cell column with the correct value in the case statement

UPDATE NashvilHousing
SET SoldAsVacant = CASE WHEN SoldAsVacant ='Y'THEN 'Yes'
	 WHEN SoldAsVacant ='N'THEN 'NO'
	 ELSE SoldAsVacant
	 END
FROM NashvilHousing

-- Remove Duplicates
-- Dont deleet data, it is better you create a temp table and place all the duplicates there.

WITH RowNumCTE AS (
SELECT *,
ROW_NUMBER() OVER (
PARTITION BY ParcelID,
			 PropertyAddress,
			 SaleDate,
			 LegalReference
			 ORDER BY
				UniqueID
			 ) AS Row_num
FROM NashvilHousing
-- ORDER BY ParcelID
)
DELETE
FROM RowNumCTE
WHERE Row_num >1

-- Delete Unused Column. 

SELECT *
FROM [PortfolioProject].[dbo].[NashvilHousing]

ALTER TABLE [PortfolioProject].[dbo].[NashvilHousing]
DROP COLUMN Owneraddress, Taxdistrict, Propertyaddress

ALTER TABLE [PortfolioProject].[dbo].[NashvilHousing]
DROP COLUMN SaleDate
